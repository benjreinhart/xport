// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var buildAst, esprima, generateFunctionBody, generateTemplateAssignmentNode, readr, TEMPLATE_IDENTIFIER;
  readr = require('readr');
  esprima = require('esprima');
  TEMPLATE_IDENTIFIER = 'templates';
  module.exports = function (path, options) {
    var files;
    if (null == options)
      options = {};
    files = readr.sync(path, options);
    return buildAst(files, options);
  };
  buildAst = function (files, options) {
    var body, wrapper;
    wrapper = esprima.parse('(function(global){}).call(this, this)');
    body = generateFunctionBody(files, options);
    wrapper.body[0].expression.callee.object.body.body = body;
    return wrapper;
  };
  generateFunctionBody = function (files, options) {
    var exportAssignment, exportExpression, lhsExpression, templateAssigments, templateVarDeclaration;
    templateVarDeclaration = esprima.parse('var ' + TEMPLATE_IDENTIFIER + ' = {};').body[0];
    templateAssigments = files.map(generateTemplateAssignmentNode);
    exportExpression = esprima.parse(null != options['export'] ? options['export'] : 'AppTemplates').body[0].expression;
    lhsExpression = exportExpression.type === 'Identifier' ? {
      type: 'MemberExpression',
      computed: false,
      object: {
        type: 'Identifier',
        name: 'global'
      },
      property: {
        type: 'Identifier',
        name: exportExpression.name
      }
    } : exportExpression;
    exportAssignment = {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: lhsExpression,
        right: {
          type: 'Identifier',
          name: TEMPLATE_IDENTIFIER
        }
      }
    };
    return [templateVarDeclaration].concat(templateAssigments).concat(exportAssignment);
  };
  generateTemplateAssignmentNode = function (file) {
    return {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: {
          type: 'MemberExpression',
          computed: true,
          object: {
            type: 'Identifier',
            name: TEMPLATE_IDENTIFIER
          },
          property: {
            type: 'Literal',
            value: null != file.friendlyPath ? file.friendlyPath : file.path
          }
        },
        right: {
          type: 'Literal',
          value: file.contents
        }
      }
    };
  };
}.call(this);
