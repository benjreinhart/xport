// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var fs, isAbsolutePath, js, nopt, options, outputPath, Path, pathOpt, paths, resolveRelative, xport;
  fs = require('fs');
  Path = require('path');
  nopt = require('nopt');
  xport = require('../');
  isAbsolutePath = function (path) {
    return /^\//.test(path);
  };
  resolveRelative = function (relativePath) {
    return Path.resolve(process.cwd(), relativePath);
  };
  options = function () {
    var aliases, opts;
    opts = {
      deps: [
        String,
        Array
      ],
      'export': String,
      extension: String,
      output: String
    };
    aliases = {
      d: '--deps',
      e: '--extension',
      m: '--minify',
      o: '--output',
      x: '--export'
    };
    return nopt(opts, aliases, process.argv, 2);
  }();
  pathOpt = options.argv.remain[0];
  delete options.argv;
  if (options.help) {
    console.log("\n  USAGE: xport OPT* path/to/files OPT*\n\n  xport app/views -e mustache -x App.Templates -o public/templates.js\n\n  -e, --extension EXTENSION     Only bundle files with extension EXTENSION\n  -d, --deps DEPENDENCY:ARG     For use with --amd flag; specify dependencies and\n                                their corresponding argument's names\n  -m, --minify                  Minify the compiled JavaScript\n  -o, --output FILE             Output to FILE instead of stdout\n  -x, --export NAME             Export the files object as NAME; if --amd flag\n                                is specified, then the module id will be NAME\n  --amd                         Export a AMD compatible module\n  --commonjs                    Export a commonjs compatible module\n  --help                        Display this help message and exit\n  --list                        Do not bundle; list the files that would be bundled\n  --version                     Display the current version number and exit\n  ");
    process.exit(0);
  }
  if (options.version) {
    console.log(require('../../package.json').version);
    process.exit(0);
  }
  if (!(null != pathOpt)) {
    console.error('wrong number of entry paths given; expected 1');
    process.exit(1);
  }
  if (options.list) {
    paths = require('readr').getPathsSync(pathOpt, options);
    console.log(JSON.stringify(paths, null, 4));
    process.exit(0);
  }
  js = xport(pathOpt, options);
  if (null != (outputPath = options.output)) {
    if (!isAbsolutePath(outputPath))
      outputPath = resolveRelative(outputPath);
    fs.writeFileSync(outputPath, js);
    process.exit(0);
  }
  console.log(js);
}.call(this);
