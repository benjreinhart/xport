// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var buildAmdProgram, esprima, FILE_IDENTIFIER, generateFileAssignmentNode, generateFunctionBody, getLHSExportExpression, parseDeps, readr;
  readr = require('readr');
  esprima = require('esprima');
  FILE_IDENTIFIER = 'files';
  module.exports = function (path, options) {
    var files, program;
    if (null == options)
      options = {};
    files = readr.sync(path, options);
    if (options.amd) {
      return buildAmdProgram(files, options);
    } else {
      program = esprima.parse('(function(global, ' + FILE_IDENTIFIER + '){}).call(this, this, {})');
      program.body[0].expression.callee.object.body.body = generateFunctionBody(files, options);
      return program;
    }
  };
  generateFunctionBody = function (files, options) {
    var exportExpression, fileAssignments, lhsExpression;
    fileAssignments = files.map(generateFileAssignmentNode);
    exportExpression = esprima.parse(getLHSExportExpression(options)).body[0].expression;
    lhsExpression = exportExpression.type === 'Identifier' ? {
      type: 'MemberExpression',
      computed: false,
      object: {
        type: 'Identifier',
        name: 'global'
      },
      property: {
        type: 'Identifier',
        name: exportExpression.name
      }
    } : exportExpression;
    return fileAssignments.concat({
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: lhsExpression,
        right: {
          type: 'Identifier',
          name: FILE_IDENTIFIER
        }
      }
    });
  };
  generateFileAssignmentNode = function (file) {
    return {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: {
          type: 'MemberExpression',
          computed: true,
          object: {
            type: 'Identifier',
            name: FILE_IDENTIFIER
          },
          property: {
            type: 'Literal',
            value: null != file.friendlyPath ? file.friendlyPath : file.path
          }
        },
        right: {
          type: 'Literal',
          value: file.contents
        }
      }
    };
  };
  getLHSExportExpression = function (options) {
    if (options.commonjs) {
      return 'module.exports';
    } else {
      return options['export'];
    }
  };
  buildAmdProgram = function (files, options) {
    var callExpression, deps, moduleDefinition, moduleDefinitionArgs, moduleDefinitionBody, program;
    program = esprima.parse('define()');
    callExpression = program.body[0].expression;
    if (options['export'])
      callExpression['arguments'].push({
        type: 'Literal',
        value: options['export']
      });
    if (options.deps) {
      deps = parseDeps(options.deps);
      callExpression['arguments'].push({
        type: 'ArrayExpression',
        elements: deps.map(function (dep) {
          return {
            type: 'Literal',
            value: dep[0]
          };
        })
      });
      moduleDefinitionArgs = deps.map(function (dep) {
        return null != dep[1] ? dep[1] : dep[0];
      }).join(', ');
    }
    moduleDefinition = esprima.parse('(function(' + (null != moduleDefinitionArgs ? moduleDefinitionArgs : '') + '){var ' + FILE_IDENTIFIER + ' = {};});').body[0].expression;
    moduleDefinitionBody = files.map(generateFileAssignmentNode).concat({
      type: 'ReturnStatement',
      argument: {
        type: 'Identifier',
        name: FILE_IDENTIFIER
      }
    });
    moduleDefinition.body.body.push.apply(moduleDefinition.body.body, [].slice.call(moduleDefinitionBody).concat());
    callExpression['arguments'].push(moduleDefinition);
    return program;
  };
  parseDeps = function (deps) {
    return function (accum$) {
      var dep;
      for (var i$ = 0, length$ = deps.length; i$ < length$; ++i$) {
        dep = deps[i$];
        accum$.push(dep.split(/:/));
      }
      return accum$;
    }.call(this, []);
  };
}.call(this);
